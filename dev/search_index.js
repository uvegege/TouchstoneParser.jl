var documenterSearchIndex = {"docs":
[{"location":"api_reference/#Public-Documentation","page":"Public Documentation","title":"Public Documentation","text":"","category":"section"},{"location":"api_reference/","page":"Public Documentation","title":"Public Documentation","text":"Documentation for TouchstoneParser.jl public interface.","category":"page"},{"location":"api_reference/#Contents","page":"Public Documentation","title":"Contents","text":"","category":"section"},{"location":"api_reference/","page":"Public Documentation","title":"Public Documentation","text":"Pages = [\"api_reference.md\"]\nDepth = 2:2","category":"page"},{"location":"api_reference/#Index","page":"Public Documentation","title":"Index","text":"","category":"section"},{"location":"api_reference/","page":"Public Documentation","title":"Public Documentation","text":"Pages = [\"api_reference.md\"]","category":"page"},{"location":"api_reference/#Public-Interface","page":"Public Documentation","title":"Public Interface","text":"","category":"section"},{"location":"api_reference/#TouchstoneParser.read_touchstone","page":"Public Documentation","title":"TouchstoneParser.read_touchstone","text":"read_touchstone(file)\n\nRead a Touchstone file with version 1.0, 1.1, 2.0 or 2.1. \n\nReturns a struct TSParser with the data. \n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.write_touchstone","page":"Public Documentation","title":"TouchstoneParser.write_touchstone","text":"write_touchstone(filename, F, A, z0; kwargs...)\n\nWrite a Touchstone file named “filename” using the format specified in the name or in the keyword version.\n\nArguments\n\nfilename: name of the file.\nF: Vector of frequencies.\nA: Data to write on the Touchstone. Can be a Vector{Matrix{ComplexF64}} or a Array{ComplexF64, 3}\nz0: Number of Vector of numbers of length equal to the number of ports.\n\nKeywords\n\nversion: Default to \"\". Must be a string like \"1.0\", \"1.1\", \"2.0\" or \"2.1\".\ndefault_comments: Default to true. Write the comment ! Touchstone file created with TouchstoneParser.jl\ndefault_date: Default to true. Add the Date to the file as a comment.\nfunit: Default to :GHz. Must be a Symbol.\nptype: Default to :S. Must be a Symbol.\nmatrixformat: Default to :FULL. Can also be :UPPER or :LOWER.\ntwoportorder: Default to \"12_21. The other option is \"21_12\".\nnoise_f: Default to nothing. Should be a Vector for each noise data.\nnoise_data: Default to nothing. Should be the noise data.\nmixedmodeorder: Default to \"\".\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.TSParser","page":"Public Documentation","title":"TouchstoneParser.TSParser","text":"TSParser\n\nStruct containing the data of the parsed Touchstone file.\n\nFile name\n\nfilename::String\n\nSettings\n\nversion::String\nn_ports::Int\n\nOption line field\n\ntype::Symbol\nformat::Symbol\nresistance::Vector{Float64}\nunits::Symbol\n\nKeyword Options\n\nn_freqs::Int\nn_noisefreqs::Int\nreferences::Vector{Float64}\ntwoport_order::String\nmixed_mode_order::String\nmatrixformat::Symbol\ninfo::Vector{String}\n\nData\n\nfrequency::Vector{Float64}\ndata::Array{ComplexF64, 3}\nnoise_frequency::Vector{Float64}\nnoise_data::Vector{NoiseData}\nz0::Matrix{ComplexF64}\n\nHFSS version: This section uses # https://github.com/scikit-rf/scikit-rf/blob/master/skrf/io/ts.py as reference.\n\nhfss_data_type::Symbol\nhfss_gamma::Vector{ComplexF64}\nhfss_impedance::Vector{ComplexF64}\ngamma::Matrix{ComplexF64}\n\nComments\n\ncomments::Vector{Tuple{Int,String}}\n\ndebug and utils\n\nport_names::Vector{String}\npstate::TouchstoneParser.ParserState\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#TouchstoneParser.NoiseData","page":"Public Documentation","title":"TouchstoneParser.NoiseData","text":"NoiseData\n\nFields\n\nmin_noise_figure::Float64 in dB\nreflection::Complex{Float64}\nReff::Float64\n\n\n\n\n\n","category":"type"},{"location":"api_reference/#TouchstoneParser.simvariables","page":"Public Documentation","title":"TouchstoneParser.simvariables","text":"simvariables(ts::TSParser) -> Dict{String,String}\n\nParse simulation variables from the comment section of a Touchstone file.\n\nThis function is able to extract parameter definitions from the comment styles used by softwares:\n\nSonnet style:\n\n\"\"\"\n!< p1 = 1.00\n!< p2 = 2.00\n!< p3 = 3\n!< p4 = 4.0 um\n!< ...\n\"\"\"\n\nHFSS style:\n\n\"\"\"\n! p1 = 1units\n! p2 = 2.0units\n! p3 = 3.0units\n! ...\n\"\"\"\n\nCST style:\n\n\"\"\"\n! Parameters = {p1 = 1.0; p2 = 2.0, p3 = 3.0, ...}\n\"\"\"\n\nArguments\n\nts::TSParser\n\nNotes\n\nFor HFSS and Sonnet variables with units. Because of this, the function returns a Dict{String, String}.\n\nExamples\n\nusing TouchstoneParser: read_touchstone\n\nts = TouchstoneParser.read_touchstone(path)\nv = simvariables(ts)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.comments_after_option_line","page":"Public Documentation","title":"TouchstoneParser.comments_after_option_line","text":"comments_after_option_line(ts::TSParser)\n\nReturns a Vector of Tuples{Int, String} where the Integer represents the line where the comment appears.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.s2h","page":"Public Documentation","title":"TouchstoneParser.s2h","text":"s2h(H)\n\nConverts hybrid S parameters to impedance H parameters.\n\nArguments\n\nH::Matrix{ComplexF64}: 2×2 S parameter matrix\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nReturns\n\nMatrix{ComplexF64}: 2×2 impedance parameter matrix\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.s2g","page":"Public Documentation","title":"TouchstoneParser.s2g","text":"s2g(H)\n\nConverts S parameters to G parameters.\n\nArguments\n\nH::Matrix{Complex}: 2×2 hybrid parameter matrix.\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nReturns\n\nMatrix{ComplexF64}: 2×2 S parameter matrix\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.h2s","page":"Public Documentation","title":"TouchstoneParser.h2s","text":"s2h(H)\n\nConverts hybrid H parameters to impedance S parameters.\n\nArguments\n\nH::Matrix{ComplexF64}: 2×2 hybrid parameter matrix\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nReturns\n\nMatrix{ComplexF64}: 2×2  matrix\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.g2s","page":"Public Documentation","title":"TouchstoneParser.g2s","text":"s2h(H)\n\nConverts hybrid G parameters to impedance S parameters.\n\nArguments\n\nH::Matrix{ComplexF64}: 2×2 hybrid parameter matrix\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nReturns\n\nMatrix{ComplexF64}: 2×2 S parameter matrix\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.h2g","page":"Public Documentation","title":"TouchstoneParser.h2g","text":"h2g(H)\n\nConverts H parameters to G parameters.\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.s2y","page":"Public Documentation","title":"TouchstoneParser.s2y","text":"s2y(S, Z0)\n\nConverts scattering parameters S to admittance parameters Y in a numerically stable way.\n\nArguments\n\nS::Matrix{Complex}: n×n scattering parameter matrix.\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nFormula\n\nY = Z_0^-12 ((I + S)  (I - S)) Z_0^-12\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.y2s","page":"Public Documentation","title":"TouchstoneParser.y2s","text":"y2s(Y, Z0)\n\nConverts admittance parameters Y to scattering parameters S in a numerically stable way.\n\nArguments\n\nY::Matrix{Complex}: n×n admittance parameter matrix.\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nFormula\n\nS = left( I + sqrtZ_0 Y sqrtZ_0 right)^-1 left( I - sqrtZ_0 Y sqrtZ_0 right)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.s2z","page":"Public Documentation","title":"TouchstoneParser.s2z","text":"s2z(S, Z0)\n\nConverts scattering parameters S to impedance parameters Z in a numerically stable way.\n\nArguments\n\nS::Matrix{Complex}: n×n scattering parameter matrix.\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nFormula\n\nZ = Z_0^12 ((I - S)  (I + S)) Z_0^12\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.z2s","page":"Public Documentation","title":"TouchstoneParser.z2s","text":"z2s(Z, Z0)\n\nConverts impedance parameters Z to scattering parameters S.\n\nArguments\n\nZ::Matrix{Complex}: n×n impedance parameter matrix.\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nFormula\n\nS = left( Z Z_0^-12 + Z_0^12 right)^-1 left( Z Z_0^-12 - Z_0^12 right)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.y2s_alternative","page":"Public Documentation","title":"TouchstoneParser.y2s_alternative","text":"y2s_alternative(Y, Z0)\n\nAlternative version of y_to_s using diagonal scaling factors.\n\nArguments\n\nY::Matrix{Complex}: n×n admittance parameter matrix.\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nFormula\n\nS = left( Z_0^-12 + Y Z_0^12 right)^-1 left( Z_0^-12 - Y Z_0^12 right)\n\n\n\n\n\n","category":"function"},{"location":"api_reference/#TouchstoneParser.s2z_alternative","page":"Public Documentation","title":"TouchstoneParser.s2z_alternative","text":"s2z_alternative(S, Z0)\n\nConversion from S to Z.\n\nArguments\n\nS::Matrix{Complex}: n×n scattering parameter matrix.\nZ0::Number or Vector: Reference characteristic impedance(s).\n\nFormula\n\nZ = Z_0^12 (I + S)  (I - S)  Z_0^12\n\nBetter stability than the direct version:\n\nZ = Z_0^12 (I + S) * inv(I - S) Z_0^12\n\n\n\n\n\n","category":"function"},{"location":"#TouchstoneParser","page":"TouchstoneParser","title":"TouchstoneParser","text":"","category":"section"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"It implements the specification (versions 1.0, 1.1, 2.0 and 2.1) and provides a simple API to access data and metadata.","category":"page"},{"location":"#Notes","page":"TouchstoneParser","title":"Notes","text":"","category":"section"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"This package is currently unregistered. While the core functionality has been tested using examples from the official Touchstone specification, it has not been extensively validated against a wide variety of real-world files. Contributions or bug reports are welcome.","category":"page"},{"location":"#Features","page":"TouchstoneParser","title":"Features","text":"","category":"section"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"[x] Parse Touchstone files in v1.0, v1.1, v2.0, v2.1 (read_touchstone). \n[x] Automatically detect format even if the filename does not contain the .sNp extension  \n[x] Write Touchstone files in the desired format (write_touchstone)  \n[x] Handle non-standard versions of the format (e.g., files generated by HFSS. Used skrf as reference because I didn't found other resources.)  \n[x] Support for comments.\n[x] Convenient access to data via ts.data, ts.frequency, ts.noise_data, ts.noise_frequency.","category":"page"},{"location":"#Roadmap","page":"TouchstoneParser","title":"Roadmap","text":"","category":"section"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"[ ] Better validation to ensure Touchstone files strictly comply with the official specification.\n[ ] Enhanced customization options for writing files, including units, formatting, and ordering.\n[ ] Batch reading/writing for entire directories of Touchstone files.","category":"page"},{"location":"#Installation","page":"TouchstoneParser","title":"Installation","text":"","category":"section"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"] add https://github.com/uvegege/TouchstoneParser.jl","category":"page"},{"location":"#Usage","page":"TouchstoneParser","title":"Usage","text":"","category":"section"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"It's easy to write and read Touchstone files:","category":"page"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"using TouchstoneParser\n\n# Example 18\nf = [2.0, 22.0]\nS = [\n    [[0.95 * cis(deg2rad(-26)), 3.57 * cis(deg2rad(157))];;\n    [0.04 * cis(deg2rad(76 )), 0.66 *cis(deg2rad(-14))]], \n    [[0.60 * cis(deg2rad(-144 )), 1.30 * cis(deg2rad(40))];;\n    [0.14 * cis(deg2rad(40)), 0.56 * cis(deg2rad(-85))]]\n]\n\nz0 = [50, 25.0]\n\nnoise_f = [4.0, 18.0]\nnoise_data = [NoiseData(0.7, 0.64 * cis(deg2rad(69)), 19), NoiseData(0.7, 0.46 * cis(deg2rad(-33)), 20)]\n\nTouchstoneParser.write_touchstone(\"Example.s2p\", f, S, z0; \n    version = \"1.0\", noise_data = noise_data, noise_f = noise_f, twoportorder = \"21_12\")\n\nTouchstoneParser.write_touchstone(\"Example.ts\", f, S, z0; \n    version = \"2.1\", noise_data = noise_data, noise_f = noise_f, twoportorder = \"21_12\")\n\nex_10 = read_touchstone(\"Example.s2p\")\nex_21 = read_touchstone(\"Example.ts\")\n","category":"page"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"You can access the data like this:","category":"page"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"ex_21.frequency        # Vector of frequencies [ts.units]\nex_21.data             # {ts.type} - parameters (Array{ComplexF64,3})\nex_21.noise_frequency  # Noise frequency points (if present)\nex_21.noise_data       # Noise data (if present)\n\nex_10.data == stack(S)\nex_21.data == stack(S)\n\nex_10.noise_data == noise_data\nex_21.noise_data == noise_data","category":"page"},{"location":"#Metadata","page":"TouchstoneParser","title":"Metadata","text":"","category":"section"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"It is possible to inspect the metadata of the read file with some key fields of the TSParser struct. ","category":"page"},{"location":"","page":"TouchstoneParser","title":"TouchstoneParser","text":"For example, the comments field stores tuples containing the line where it was read and a string with the comment. This allows, for example, to extract the variables written in the touchstone by programs such as HFSS or CST using the simvariables(ts) function.","category":"page"}]
}
